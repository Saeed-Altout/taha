// Types for API responses
export interface AuthApiResponse<T = Record<string, unknown>> {
  success: boolean;
  message: string;
  token?: string;
  data?: T;
}

export interface SignUpData {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  acceptTerms: boolean;
  receiveNotifications?: boolean;
}

/**
 * Simulates an API call for user login.
 * This function mimics a real authentication endpoint for development/testing purposes.
 *
 * @param email - The user's email address.
 * @param password - The user's password.
 * @returns Promise<AuthApiResponse>
 */
export async function simulateLoginApi(
  email: string,
  password: string
): Promise<AuthApiResponse> {
  // Simulate network latency for a more realistic UX
  await new Promise((resolve) => setTimeout(resolve, 1200));

  // Hardcoded credentials for simulation
  const validEmail = "admin@gmail.com";
  const validPassword = "Admin123%";

  if (email === validEmail && password === validPassword) {
    // In a real app, the token would be generated by the backend
    const fakeToken = "fake-jwt-token-123456";
    return {
      success: true,
      message: "تم تسجيل الدخول بنجاح",
      token: fakeToken,
    };
  }

  return {
    success: false,
    message: "البريد الإلكتروني أو كلمة المرور غير صحيحة",
  };
}

/**
 * Simulates an API call for user registration.
 * This function mimics a real user registration endpoint for development/testing purposes.
 *
 * @param userData - The user registration data.
 * @returns Promise<AuthApiResponse>
 */
export async function simulateSignUpApi(
  userData: SignUpData
): Promise<AuthApiResponse> {
  // Simulate network latency
  await new Promise((resolve) => setTimeout(resolve, 1500));

  // Simulate email already exists check
  const existingEmails = ["admin@gmail.com", "test@example.com"];

  if (existingEmails.includes(userData.email.toLowerCase())) {
    return {
      success: false,
      message: "البريد الإلكتروني مستخدم بالفعل",
    };
  }

  // Simulate successful registration
  const fakeToken = "fake-jwt-token-signup-" + Date.now();
  return {
    success: true,
    message:
      "تم إنشاء الحساب بنجاح. يرجى التحقق من بريدك الإلكتروني لتفعيل الحساب",
    token: fakeToken,
    data: {
      userId: "user-" + Date.now(),
      email: userData.email,
      firstName: userData.firstName,
      lastName: userData.lastName,
      emailVerified: false,
    },
  };
}

/**
 * Simulates an API call for forgot password request.
 * This function mimics a real forgot password endpoint for development/testing purposes.
 *
 * @param email - The user's email address.
 * @returns Promise<AuthApiResponse>
 */
export async function simulateForgotPasswordApi(
  email: string
): Promise<AuthApiResponse> {
  // Simulate network latency
  await new Promise((resolve) => setTimeout(resolve, 1000));

  // Simulate email existence check
  const existingEmails = ["admin@gmail.com", "test@example.com"];

  if (!existingEmails.includes(email.toLowerCase())) {
    return {
      success: false,
      message: "البريد الإلكتروني غير مسجل في النظام",
    };
  }

  return {
    success: true,
    message: "تم إرسال رابط إعادة تعيين كلمة المرور إلى بريدك الإلكتروني",
    data: {
      resetToken: "fake-reset-token-" + Date.now(),
      expiresIn: "15 minutes",
    },
  };
}

/**
 * Simulates an API call for password reset.
 * This function mimics a real password reset endpoint for development/testing purposes.
 *
 * @param token - The reset token.
 * @param newPassword - The new password.
 * @returns Promise<AuthApiResponse>
 */
export async function simulateResetPasswordApi(
  token: string,
  newPassword: string
): Promise<AuthApiResponse> {
  // Simulate network latency
  await new Promise((resolve) => setTimeout(resolve, 1200));

  // Simulate token validation
  if (!token || token.length < 10) {
    return {
      success: false,
      message: "رمز إعادة التعيين غير صالح أو منتهي الصلاحية",
    };
  }

  // In a real implementation, the newPassword would be hashed and stored
  console.log(
    "Password reset for token:",
    token,
    "New password length:",
    newPassword.length
  );

  return {
    success: true,
    message:
      "تم تغيير كلمة المرور بنجاح. يمكنك الآن تسجيل الدخول بكلمة المرور الجديدة",
  };
}

/**
 * Simulates an API call for email verification.
 * This function mimics a real email verification endpoint for development/testing purposes.
 *
 * @param verificationCode - The 6-digit verification code.
 * @param email - The user's email address (optional).
 * @returns Promise<AuthApiResponse>
 */
export async function simulateVerifyEmailApi(
  verificationCode: string,
  email?: string
): Promise<AuthApiResponse> {
  // Simulate network latency
  await new Promise((resolve) => setTimeout(resolve, 1000));

  // Simulate valid verification codes
  const validCodes = ["123456", "654321", "111111"];

  if (!validCodes.includes(verificationCode)) {
    return {
      success: false,
      message: "رمز التحقق غير صحيح",
    };
  }

  // In a real implementation, email would be used to update the user's verification status
  console.log(
    "Email verification for:",
    email || "current user",
    "Code:",
    verificationCode
  );

  return {
    success: true,
    message: "تم تفعيل البريد الإلكتروني بنجاح",
    data: {
      emailVerified: true,
      verifiedAt: new Date().toISOString(),
      email: email || "user@example.com",
    },
  };
}

/**
 * Simulates an API call to resend verification email.
 * This function mimics a real resend verification endpoint for development/testing purposes.
 *
 * @param email - The user's email address.
 * @returns Promise<AuthApiResponse>
 */
export async function simulateResendVerificationApi(
  email: string
): Promise<AuthApiResponse> {
  // Simulate network latency
  await new Promise((resolve) => setTimeout(resolve, 800));

  // Simulate email existence check
  const existingEmails = ["admin@gmail.com", "test@example.com"];

  if (!existingEmails.includes(email.toLowerCase())) {
    return {
      success: false,
      message: "البريد الإلكتروني غير مسجل في النظام",
    };
  }

  return {
    success: true,
    message: "تم إرسال رمز التحقق الجديد إلى بريدك الإلكتروني",
    data: {
      newCode: "123456", // In real app, this wouldn't be returned
      expiresIn: "10 minutes",
    },
  };
}
